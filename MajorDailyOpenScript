//@version=5

import kaiku0125/Debug/1 as debug
import kaiku0125/Colour/1 as colour
import kaiku0125/Util/1 as util
//日線陰陽轉換條件
//1.陰陽轉換
//2.區域高低點
//3.成交量要大
//4.

// # ========================================================================= #
// #                   |   Indicator  |
// # ========================================================================= #
indicator(
 title                = "MajorDailyOpenFinder",
 shorttitle           = "重要日開",
 overlay              =  true,
//  format               =  ,
//  precision            =  ,
//  scale                =  ,
//   timeframe            = "D",
//  timeframe_gaps       =  true
//  explicit_plot_zorder =  ,
 max_lines_count      =  6,
 max_labels_count     =  500
//  max_boxes_count      =  
 )
// # ========================================================================= #
// #                   |   Indicator  |
// # ========================================================================= #

// Define inputs settings
var GROUP_SETTING = "📌 設定"
var GROUP_VERSION = "💬 關於"
var VERSION_NAME = "v1.0"
var RELEASE_NOTE = VERSION_NAME + " Release note :" + "\n" + 
                     "[1] First release."
                     
INPUT_DISPLAY_VERSION_NAME = input.string(defval = VERSION_NAME, title = "版本", options = [VERSION_NAME], tooltip = RELEASE_NOTE, group = GROUP_VERSION) 


// Variable initialization
var bool IS_DEBUG = false
var int BEAR = 0
var int BULL = 1
var bool isBarChanged = false
var bool nextBarNeedShow = false
var int lastDayState = BULL
var int currentDayState = BULL

var label debugLabel = na

//垂直柱
var float percent = 0.0
var int percentIndex = 0

//輸出圖表
var float[] storedOpenPrice = array.new_float()
var float[] displayOpenPrice = array.new_float()
var int[] storedBarIndex = array.new_int() 
var int[] displayBarIndex = array.new_int() 
var float[] storedPercent = array.new_float() 
var float[] displayPercent = array.new_float()
var label displayLabel = na
var line displayLine = na

// Define functions
// Get recently bar and chosen three bull bear bar.
getLatestOpenIndexArray(arrayOpen, arrayIndex, arrayPercent, isBull) =>
    float[] arrayCopyOpenPriceReverse = array.copy(id = arrayOpen)
    array.reverse(id = arrayCopyOpenPriceReverse)
    int[] arrayCopyIndexReverse = array.copy(id = arrayIndex)
    array.reverse(id = arrayCopyIndexReverse) 
    float[] arrayCopyPercentReverse = array.copy(id = arrayPercent)
    array.reverse(id = arrayCopyPercentReverse)
    int[] returnIndexArray = array.new_int(0)

    int barIndexSize = array.size(id = arrayCopyIndexReverse)
    if barIndexSize >= 3
        for i = 0 to (barIndexSize == 0 ? na : array.size(arrayCopyPercentReverse) - 1)
            cond1 = isBull ? array.get(id = arrayCopyPercentReverse, index = i) > 0 : array.get(id = arrayCopyPercentReverse, index = i) < 0 
            cond2 = isBull ? array.get(id = arrayCopyOpenPriceReverse, index = i) - open < 0 : array.get(id = arrayCopyOpenPriceReverse, index = i) - open > 0

            if cond1 and cond2
                array.push(id = returnIndexArray, value = barIndexSize - i - 1)
                if array.size(id = returnIndexArray) == 3
                    break 

    returnIndexArray

choseDisplayParamsOutput() =>
    int[] mBullOutputIndex = getLatestOpenIndexArray(storedOpenPrice, storedBarIndex, storedPercent, true)
    int[] mBearOutputIndex = getLatestOpenIndexArray(storedOpenPrice, storedBarIndex, storedPercent, false)
    array.clear(id = displayOpenPrice) 
    array.clear(id = displayBarIndex) 
    array.clear(id = displayPercent)

    // Get bull output
    for i = 0 to (array.size(mBullOutputIndex) == 0 ? na : array.size(mBullOutputIndex) - 1)
        int targetBullIndex = array.get(id = mBullOutputIndex, index = i)
        array.push(id = displayOpenPrice, value = array.get(id = storedOpenPrice, index =  targetBullIndex) ) 
        array.push(id = displayBarIndex, value = array.get(id = storedBarIndex, index =  targetBullIndex) ) 
        array.push(id = displayPercent, value = array.get(id = storedPercent, index =  targetBullIndex) ) 

    //Get bear output
    for i = 0 to (array.size(mBearOutputIndex) == 0 ? na : array.size(mBearOutputIndex) - 1)
        int targetBearIndex = array.get(id = mBearOutputIndex, index = i)
        array.push(id = displayOpenPrice, value = array.get(id = storedOpenPrice, index =  targetBearIndex) ) 
        array.push(id = displayBarIndex, value = array.get(id = storedBarIndex, index =  targetBearIndex) ) 
        array.push(id = displayPercent, value = array.get(id = storedPercent, index =  targetBearIndex) ) 

//Code login start
//抓出陰陽轉換bar
dayHigh = request.security(syminfo.tickerid, 'D', high)
dayLow = request.security(syminfo.tickerid, 'D', low)
dayOpen = request.security(syminfo.tickerid, 'D', open)
dayClose = request.security(syminfo.tickerid, 'D', close)
dayVolume = request.security(syminfo.tickerid, 'D', volume)
dayBarIndex = request.security(syminfo.tickerid, 'D', bar_index)
dayTimeClose = request.security(syminfo.tickerid, 'D', time_close)


currentDayState := util.isBullBar(dayClose, dayOpen) ? BULL : BEAR

//日線是否陰陽轉換
cond1 = lastDayState != currentDayState ? true : false

//找出現在時框此bar是否 = 日線開盤的位置
cond2 = if timeframe.period != util.daily()
    dayTimeClose == time_close[1] ? true : false
else 
    true

//日線垂直柱 > 5%漲跌幅
percent := util.getBarPercentage(dayClose, dayOpen)
// float seriesPercent = math.abs(getBarPercentage(dayClose, dayOpen)) // ta.sma(source = seriesPercent, length = 20) 

cond3 = math.abs(number = percent)  >  5


// 如果此時 上一個顯示要show && 是日線開盤位置 && 漲幅5%以上
bool finalCond = if timeframe.period != util.daily()
    nextBarNeedShow and cond2 and cond3 and util.isCurrentTimeFrameAvailable()
else
    cond1 and cond2 and cond3 and util.isCurrentTimeFrameAvailable()

if finalCond
    float thisOpenPrice = open[util.getCandleOffestByTimeFrame()]    
    array.push(id = storedOpenPrice, value = thisOpenPrice)
    array.push(id = storedBarIndex, value = bar_index[util.getCandleOffestByTimeFrame()])  
    array.push(id = storedPercent, value = percent) 


if cond1
    nextBarNeedShow := true
else
    nextBarNeedShow := false
    
lastDayState := currentDayState


if barstate.islast
    choseDisplayParamsOutput()
    // Draw all data on chart
    for i = 0 to (array.size(displayOpenPrice) == 0 ? na : array.size(displayOpenPrice) - 1)
        float tempPrice = array.get(id = displayOpenPrice, index = i)
        string tempPriceText = str.tostring(value = tempPrice) 
        int tempIndex = array.get(id = displayBarIndex, index = i)
        float tempPercent = array.get(id = displayPercent, index = i) 
        displayLabel := label.new(
        //  x            = tempIndex,
         x            = bar_index + (util.getCandleOffestByTimeFrame() + 1) * 5,
        //  y            = tempPercent > 0 ? low[bar_index - tempIndex]*0.999 : high[bar_index - tempIndex]*1.001,
         y            = tempPrice,
         text         = tempPriceText,
        //  color        = color.new(color = tempPercent > 0 ? color.green : color.red, transp = 0),
        //  style        = tempPercent > 0 ? label.style_label_up : label.style_label_down,
         style        = label.style_none,
        //  textcolor    = color.new(color =  color.white, transp = 0)
         textcolor    = color.new(color = tempPercent > 0 ? color.green : color.red, transp = 0)
         )
        displayLine := line.new(x1 = tempIndex, y1 = tempPrice, x2 = tempIndex + 1, y2 = tempPrice, extend =  extend.right, color = color.new(color =  tempPercent > 0 ? colour.DARK_GREEN() : colour.DARK_RED(), transp = 0), width = 1) 
        
    
    if IS_DEBUG
        mOutput = str.tostring(value = displayOpenPrice) + "\n"
        mOutput += str.tostring(value = displayBarIndex) + "\n"
        mOutput += str.tostring(value = displayPercent) 
        debugLabel := debug.printLabel(mOutput)
        label.delete(id = debugLabel[1])



