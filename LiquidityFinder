//@version=5

// 1. Import library
import kaiku0125/Debug/1 as debug
import kaiku0125/Colour/1 as colour
import kaiku0125/Util/1 as util
// # ========================================================================= #
// #                   |   Indicator  |
// # ========================================================================= #
indicator(
 title                = "Liquidity finder",
 shorttitle           = "",
 overlay              =  true,
 max_lines_count      = 5,
 max_labels_count     = 10
 )
// # ========================================================================= #
// #                   |   Indicator  |
// # ========================================================================= #

// 2. Preference inputs settings

// 3. Constant value initialization
var int LEFT_OFFSET = 7
var int RIGHT_OFFSET = 2


// 4. Variable declartion
var float regionHigh = 0.0
var line[] lineHighArray = array.new_line()
var bool isHighBreak = false

var float regionLow = 1000000000.0
var line[] lineLowArray = array.new_line()
var bool isLowBreak = false 

var bool needCalAgain = true
var bool isBreak = true

var label breakLabel = na
var label debugLabel = na

// 5. Define functions

// 6. Code logic start
float pHigh = ta.pivothigh(leftbars = LEFT_OFFSET, rightbars = RIGHT_OFFSET)
plot(pHigh, style=plot.style_cross, linewidth=3, color= color.white, offset = -RIGHT_OFFSET)

float pLow = ta.pivotlow(leftbars = LEFT_OFFSET, rightbars = RIGHT_OFFSET) 
plot(pLow, style=plot.style_circles, linewidth=3, color= color.yellow, offset = -RIGHT_OFFSET)


//計算高點
bool cond1 = not na(pHigh)
bool cond2 = pHigh > regionHigh
if cond1 and needCalAgain
    line lineHigh = line.new(x1 = bar_index - RIGHT_OFFSET, y1 = pHigh, x2 = bar_index, y2 = pHigh, color = color.red)
    array.push(id = lineHighArray, value = lineHigh)
    if array.size(id = lineHighArray) > 1
        line.delete(id = array.shift(id = lineHighArray) ) 

if cond1 and cond2
    regionHigh := pHigh


//計算低點
bool cond3 = not na(pLow)
bool cond4 = pLow < regionLow
if cond3 and needCalAgain
    line lineLow = line.new(x1 = bar_index - RIGHT_OFFSET, y1 = pLow, x2 = bar_index, y2 = pLow, color = color.green)
    array.push(id = lineLowArray, value = lineLow)
    if array.size(id = lineLowArray) > 1
        line.delete(id = array.shift(id = lineLowArray) ) 

if cond3 and cond4
    regionLow := pLow

//如果都計算完畢
if needCalAgain and regionHigh != 0 and regionLow != 1000000000.0
    needCalAgain := false

// Extend the lines.
// if barstate.islast
bool crossUp = false
for lineHigh in lineHighArray
    line.set_x2(lineHigh, bar_index)

    float linePriceHigh = line.get_y1(lineHigh)
    // debugLabel := debug.printLabel(str.tostring(value = linePrice) )
    
    bool newCrossUp = close[1] < linePriceHigh and close > linePriceHigh
    crossUp := newCrossUp


    if crossUp
        needCalAgain := true
        regionHigh := 0.0
        regionLow := 1000000000.0
        breakLabel := label.new(bar_index, low * 0.99, "破高", color = color.black, textcolor = color.orange)
        // label.delete(id = breakLabel[1])
        



bool crossDown = false
for lineLow in lineLowArray
    line.set_x2(lineLow, bar_index)

    float linePriceLow = line.get_y1(lineLow)

    bool newCrossDown = close[1] > linePriceLow and close < linePriceLow
    crossDown := newCrossDown


    if crossDown
        needCalAgain := true
        regionHigh := 0.0
        regionLow := 1000000000.0
        breakLabel := label.new(bar_index, low * 0.99, "破低", color = color.black, textcolor = color.orange)





string outputText = "高 : " +  str.tostring(value = regionHigh) + "\n" + "低 : " +  str.tostring(value = regionLow)
debugLabel := debug.printLabel(outputText)
label.delete(id = debugLabel[1])



// if close[1] > regionHigh and regionHigh != 0.0
//     debugLabel := debug.printLabel("破")
//     isBreak  := true
//     regionHigh := 0
    
    

// if close[1] < regionLow and regionLow != 1000000000.0
//     debugLabel := debug.printLabel("破")
//     isBreak := true
//     regionLow := 1000000000

// bool crossUp = false
// for lineHigh in lineHighArray
//     float linePrice = line.get_y1(lineHigh)
//     bool newCrossUp = close[1] < linePrice and close > linePrice
//     // bool newCrossDn = close[1] > linePrice and close < linePrice
//     crossUp := newCrossUp

// if crossUp
//     needCalAgain := true
//     debugLabel := debug.printLabel("破")


// // Alert.
// if cross
//     alert("A cross has occurred")

// plotchar(cross, "Cross", "X", color = color.white)
